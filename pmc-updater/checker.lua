local installations = {}

CreateThread(LoadConfigurationFile)

function GetResourceFromGithub(gitUrl, savingPath)
	local git = github(gitUrl)
	local lastRelease = git:getLastRelease()
	if lastRelease and lastRelease.tag_name ~= resourceVersion then
		local files = git:getFiles()
		for i, file in pairs(files) do
			printLog('\t\tDownloading', file.name, 'file', i, 'of', #files, ("[%s]"):format(file.raw))
			local fileString = GetFile(file.raw)
			printLog('\t\tDownloaded', file.name)
			if file.name == 'fxmanifest.lua' or file.name == '__resource.lua' --[[ compatibility?? ]] then
				if not fileString:find([[pmc_updates '*.*']]) then
					fileString = fileString .. ("\n-- This was auto-generated by pmc-updater (github.com/pitermcflebor/pmc-updater)\npmc_updates '%s'"):format((lastRelease.tag_name ~= 'none' and 'yes' or 'no'))
					if lastRelease.tag_name == 'none' then
						fileString = fileString .. '-- This resource doesn\'t has any release tag, it cannot be auto-updated! Request the author to add a release.'
					end
				end
				if not fileString:find([[pmc_github '*.*']]) then
					fileString = fileString .. ("\npmc_github '%s'"):format(gitUrl)
				end
				if not fileString:find(("pmc_version '%s'"):format(lastRelease.tag_name)) then
					fileString = fileString .. ("\npmc_version '%s'"):format(lastRelease.tag_name)
				else
					fileString = fileString:gsub("pmc_version '*.*'", ("pmc_version '%s'"):format(lastRelease.tag_name))
				end
			end
			if not savingPath:endsWith('/') then savingPath = savingPath..'/' end
			local path = ("%s%s%s"):format(savingPath, ("%s/"):format(git.repo_data.name), file.path:gsub(git.repo_data.name:ensure()..'/', ''))
			WriteFile(path, fileString)
			Wait(50) -- prevent API flood
		end
		installations[git.repo_data.name] = ("%s%s"):format(savingPath, ("%s/"):format(git.repo_data.name))
		printLog('\tEnd cloning resource:', git.repo_data.name)
		printLog('To open the extract folder type ^3git dir', git.repo_data.name)
		return git.repo_data.name
	else
		printLog('\tis up to date!')
	end
end

function UpdateResource(resource, disableStoppedLog)
	if resource and GetResourceState(resource) == 'started' then											-- resource started?
		if GetResourceMetadata(resource, 'pmc_updates', 0) == 'yes' then 									-- check meta 'updates' if want updates
			printLog('\tUpdating the resource:', resource)

			local metaGitLink = GetResourceMetadata(resource, 'pmc_github', 0)								-- get github url
			local resourceVersion = GetResourceMetadata(resource, 'pmc_version', 0)							-- get current version
			if metaGitLink ~= nil and resourceVersion ~= nil then
				local git = github(metaGitLink)
				local lastRelease = git:getLastRelease()
				if lastRelease and lastRelease.tag_name ~= resourceVersion then
					local files = git:getFiles()
					for i, file in pairs(files) do
						printLog('\t\tDownloading', file.name, 'file', i, 'of', #files)
						local fileString = GetFile(file.raw)
						printLog('\t\tDownloaded', file.name)
						if file.name == 'fxmanifest.lua' or file.name == '__resource.lua' then
							if not fileString:find([[pmc_updates '*.*']]) then
								fileString = fileString .. "\n\n-- This was auto-generated by pmc-updater (github.com/pitermcflebor/pmc-updater)\npmc_updates 'yes'"
							end
							if not fileString:find([[pmc_github '*.*']]) then
								fileString = fileString .. ("\npmc_github '%s'"):format(metaGitLink)
							end
							if not fileString:find(("\npmc_version '*.*'"):format(lastRelease.tag_name)) then
								fileString = fileString .. ("\npmc_version '%s'"):format(lastRelease.tag_name)
							else
								fileString = fileString:gsub("pmc_version '*.*'", ("pmc_version '%s'"):format(lastRelease.tag_name))
							end
						end
						WriteFile(GetResourcePath(resource)..'/'..file.path:gsub(resource:ensure()..'/', ''), fileString)
					end
					printLog('\tEnd updating resource:', resource)
					return true
				else
					printLog('\tis up to date!')
				end
			else
				printWarning('Error updating resource:', resource)
				printWarning('\tThe meta "github" or "version" is not set!')
			end
		else
			if not disableStoppedLog then
				printWarning('Error updating resource:', resource)
				printWarning('\tThe resource is not supported with pmc-updater! Ask the author or add manually the updater')
				printLog('\tIf you really want to update this script, just re-clone the resource!')
			end
		end
	else
		if not disableStoppedLog then
			printWarning('Error updating resource:', resource)
			printWarning('\tThe resource isn\'t started', GetResourceState(resource))
		end
	end
end

function CheckUpdates(waittime)
	if not waittime then
		Wait(5*1000)
		printLog('Checking resources in 5 seconds...^7')
		Wait(5--[[ seconds ]]*1000)
	end
	printLog('Started checking resources...')

	local numResources = GetNumResources() 																		-- get max resources

	for i = 0, numResources, 1 do 																				-- for loop resources
		local resource = GetResourceByFindIndex(i)																-- get resource
		UpdateResource(resource, true)
	end

	printLog('End checking resources!')
end

if GetResourceMetadata(GetCurrentResourceName(), 'auto', 0) == 'yes' then
	CreateThread(CheckUpdates)
end

RegisterCommand('clearconsole', function() print(table.concat(table.fill('\n', 30), '')) end, true)

RegisterCommand('git', function(s, args, rawArgs)
	if s ~= 0 then return end
	local resourcesPath = GetCurrentResourcesPath()
	local params = table.build(rawArgs:split())
	table.remove(params, 1)

	local canUseRefresh = CanUseCommand('refresh')
	local canUseEnsure = CanUseCommand('ensure')

	local module = params[1]
	if module == 'update' then
		local resource = params[2]
		if resource == nil or resource == '' or resource == '*' then
			CheckUpdates(true)
		else
			if UpdateResource(resource) then
				-- TO:DO add restart resource
			end
		end
	elseif module == 'clone' then
		local options, gitUrl, folder = {}, '', nil
		if params[2]:startsWith('-') then
			_, _options = table.build(params[2]:split('.'))
			for _, option in pairs(_options) do options[option] = true end
			gitUrl = params[3]
			folder = params[4]
		else
			gitUrl = params[2]
			folder = params[3]
		end
		if folder then
			folder = resourcesPath..'/'..folder
		end
		if not gitUrl then printWarning('Missing git url')
		else
			printLog('Cloning "', gitUrl, '" into "', folder or resourcesPath, '"')
			local resourceName = GetResourceFromGithub(gitUrl, folder or resourcesPath)
			if options['r'] ~= nil and resourceName ~= nil then
				if CanUseCommand('refresh') == false or CanUseCommand('ensure') == false or CanUseCommand('start') == false or CanUseCommand('stop') == false then
					printWarning"Cannot use command refresh or ensure!"
					if not canUseRefresh or not canUseEnsure then
						printWarning"\tTo fix this type in 'git ace'!"
					else
						printWarning"\tIt appears that there's a bug with the ACE permissions..."
						printLog("\tTo run manually the new resource type in 'refresh' and then 'ensure "..resourceName.."'")
					end
				else
					printLog"Refreshing resources..."
					ExecuteCommand("refresh")
					printLog"(Re)Starting resource..."
					ExecuteCommand("ensure "..resourceName)
				end
			end
			if options['c'] ~= nil and resourceName ~= nil then
				printLog"Adding resource to .cfg file"
				if AddResourceToCfg(resourceName) then
					printLog"\tResource added to .cfg, restart the server if needed!"
				else
					printWarning"\tCould not add the resource to .cfg"
				end
			end
		end
	elseif module == 'del' then
		local resource = params[2]
		printLog"Deleting resource folder..."
		if GetResourceState(resource) == 'started' then
			if CanUseCommand('stop') then
				ExecuteCommand('stop '..resource)
				printLog"\tResource stopped"
				if DeleteFolder(GetResourcePath(resource)) and RemoveResourceFromCfg(resource) then
					printLog"\tRemoved resource folder"
				else
					printWarning"\tCould not remove the resource correctly"
				end
			else
				printWarning"\tCannot stop the resource, do it manually to remove the resource!"
			end
		elseif GetResourceState(resource) == 'stopped' then
			if DeleteFolder(GetResourcePath(resource)) and RemoveResourceFromCfg(resource) then
				printLog"\tRemoved resource folder"
			else
				printWarning"\tCould not remove the resource correctly"
			end
		elseif installations[resource] then
			if DeleteFolder(installations[resource]) and RemoveResourceFromCfg(resource) then
				printLog"\tRemoved resource folder"
			else
				printWarning"\tCould not remove the resource cloned"
			end
		else
			printWarning"\tCannot find the resource or git cloned!"
		end
	elseif module == 'dir' then
		if GetWorkingOS() ~= 'windows' then
			printWarning('This command is only supported on MS-Windows!')
			return
		end
		local resource = params[2]
		if resource ~= nil and resource ~= '' then
			if GetResourceState(resource) == 'started' then
				OpenFolder(GetResourcePath(resource))
				return
			else
				if installations[resource] then
					OpenFolder(installations[resource])
					return
				end
			end
			printWarning('The resource is not started or not previously cloned!')
		else
			printWarning('Syntax error: git dir [resource-name]')
		end
	elseif module == 'ace' then
		local autoAdd = params[2]
		if not autoAdd then
			if CanUseCommand('refresh') == false or CanUseCommand('ensure') == false or CanUseCommand('start') == false or CanUseCommand('stop') == false then
				printWarning('Some permssions are missing!')
				printLog("Use 'git ace -h' to see how to add permissions")
				printLog("Use 'git ace -y' to auto set permissions into .cfg file!")
			else
				printLog('All permissions are OK!')
			end
		elseif autoAdd == '-h' then
			if GetWorkingOS() == 'windows' then
				os.execute('start https://github.com/pitermcflebor/pmc-updater/blob/main/README.md#tutorial')
			else
				printLog("Check the tutorial at https://github.com/pitermcflebor/pmc-updater/blob/main/README.md#tutorial")
			end
		elseif autoAdd == '-y' then
			if canUseRefresh == true and canUseEnsure == true then
				printLog('Permissions already satisfied!')
			else
				if AddAcePermission({'command.refresh', 'command.ensure', 'command.start', 'command.stop'}) == false then
					printWarning("Cannot find the .cfg file! Define your custom .cfg file at '.config.lua'")
				else
					printLog("Permissions added!")
				end
			end
		end
	elseif module == 'help' or module == '?' then
		printLog"Allowed commands:"
		printLog"\tgit update [resource-name] - Updates one or all resources"
		printLog"\tgit clone [options] github.com/giturl [path] - Clone the resource from github"
		printLog"\t\toptions: (can be both)"
		printLog"\t\t\tr - Executes 'refres' and 'ensure' when finishes the clone"
		printLog"\t\t\tc - Add 'ensure' to the .cfg file when finishes the clone"
		printLog"\tgit del resource-name - Delete the resource folder"
		printLog"\tgit dir resource-name - (Windows only) Open the resource folder with file explorer"
		printLog"\tgit ace [option] [args] - Check ACE permissions for pmc-updater"
		printLog"\t\tgit ace -h - Show help for ACE permissions"
		printLog"\t\tgit ace -y - Add ACE permissions to .cfg file automatic"
		printLog"Need more help? Check the github repo or ask via FiveM forum post!"
	else
		printWarning('The command', ("'%s'"):format(rawArgs), 'doesn\'t exists!')
		printWarning('Type "git help" or "git ?" to see the allowed commands!')
	end
end, true)
