
function GetResourceFromGithub(gitUrl, savingPath)
	local git = github(gitUrl)
	local lastRelease = git:getLastRelease()
	if lastRelease and lastRelease.tag_name ~= resourceVersion then
		local files = git:getFiles()
		for i, file in pairs(files) do
			printLog('\t\tDownloading', file.name, 'file', i, 'of', #files, ("[%s]"):format(file.raw))
			local fileString = GetFile(file.raw)
			if file.name == 'fxmanifest.lua' then
				if not fileString:find([[pmc_updates '*.*']]) then
					fileString = fileString .. ("\n-- This was auto-generated by pmc-updater (github.com/pitermcflebor/pmc-updater)\npmc_updates '%s'"):format((lastRelease.tag_name ~= 'none' and 'yes' or 'no'))
					if lastRelease.tag_name == 'none' then
						fileString = fileString .. '-- This resource doesn\'t has any release tag, it cannot be auto-updated! Request the author to add a release.'
					end
				end
				if not fileString:find([[pmc_github '*.*']]) then
					fileString = fileString .. ("\npmc_github '%s'"):format(gitUrl)
				end
				if not fileString:find(("pmc_version '%s'"):format(lastRelease.tag_name)) then
					fileString = fileString .. ("\npmc_version '%s'"):format(lastRelease.tag_name)
				else
					fileString = fileString:gsub("pmc_version '*.*'", ("pmc_version '%s'"):format(lastRelease.tag_name))
				end
			end
			if not savingPath:endsWith('/') then savingPath = savingPath..'/' end
			local path = ("%s%s%s"):format(savingPath, ("%s/"):format(git.repo_data.name), file.path:gsub(git.repo_data.name:ensure()..'/', ''))
			WriteFile(path, fileString)
			Wait(50)
		end
		printLog('\tEnd updating resource:', git.repo_data.name)
	else
		printLog('\tis up to date!')
	end
end

function UpdateResource(resource)
	if resource and GetResourceState(resource) == 'started' then											-- resource started?
		if GetResourceMetadata(resource, 'pmc_updates', 0) == 'yes' then 									-- check meta 'updates' if want updates
			printLog('\tUpdating the resource:', resource)

			local metaGitLink = GetResourceMetadata(resource, 'pmc_github', 0)								-- get github url
			local resourceVersion = GetResourceMetadata(resource, 'pmc_version', 0)							-- get current version
			if metaGitLink ~= nil and resourceVersion ~= nil then
				local git = github(metaGitLink)
				local lastRelease = git:getLastRelease()
				if lastRelease and lastRelease.tag_name ~= resourceVersion then
					local files = git:getFiles()
					for i, file in pairs(files) do
						printLog('\t\tDownloading', file.name, 'file', i, 'of', #files)
						local fileString = GetFile(file.raw)
						if file.name == 'fxmanifest.lua' then
							if not fileString:find([[pmc_updates '*.*']]) then
								fileString = fileString .. "\n-- This was auto-generated by pmc-updater (github.com/pitermcflebor/pmc-updater)\npmc_updates 'yes'"
							end
							if not fileString:find([[pmc_github '*.*']]) then
								fileString = fileString .. ("\npmc_github '%s'"):format(metaGitLink)
							end
							if not fileString:find(("\npmc_version '%s'"):format(lastRelease.tag_name)) then
								fileString = fileString .. ("\npmc_version '%s'"):format(lastRelease.tag_name)
							else
								fileString = fileString:gsub("pmc_version '*.*'", ("pmc_version '%s'"):format(lastRelease.tag_name))
							end
						end
						WriteFile(GetResourcePath(resource)..'/'..file.path:gsub(resource:ensure()..'/', ''), fileString)
					end
					printLog('\tEnd updating resource:', resource)
				else
					printLog('\tis up to date!')
				end
			else
				printWarning('Error updating resource:', resource)
				printWarning('\tThe meta "github" or "version" is not set!')
			end
		end
	else
		printWarning('Error updating resource:', resource)
		printWarning('\tThe resource isn\'t started', GetResourceState(resource))
	end
end

function CheckUpdates()
	Wait(5*1000)
	printLog('Checking resources in 5 seconds...^7')
	Wait(5--[[ seconds ]]*1000)
	printLog('Started checking resources...')

	local numResources = GetNumResources() 																		-- get max resources

	for i = 0, numResources, 1 do 																				-- for loop resources
		local resource = GetResourceByFindIndex(i)																-- get resource
		UpdateResource(resource)
	end

	printLog('End checking resources!')
end

if GetResourceMetadata(GetCurrentResourceName(), 'auto', 0) == 'yes' then
	CreateThread(CheckUpdates)
end

RegisterCommand('clearconsole', function() print(table.concat(table.fill('\n', 30), '')) end, true)

RegisterCommand('git', function(s, args, rawArgs)
	if s ~= 0 then return end
	local resourcesPath = GetResourcePath(GetCurrentResourceName()):gsub('resources.*', 'resources')
	local params = table.build(rawArgs:split())
	table.remove(params, 1)

	local module = params[1]
	if module == 'update' then
		local resource = params[2]
		if resource == nil or resource == '' or resource == '*' then
			CheckUpdates()
		else
			UpdateResource(resource)
		end
	elseif module == 'clone' then
		local gitUrl = params[2]
		local folder = params[3]
		if folder then
			folder = resourcesPath..'/'..folder
		end
		if not gitUrl then printWarning('Missing git url')
		else
			printLog('\nCloning "', gitUrl, '" into "', folder or resourcesPath, '"')
			GetResourceFromGithub(gitUrl, folder or resourcesPath)
			-- TO:DO
			-- Add refresh
			-- Add auto (re)start
		end
	end
end, true)
