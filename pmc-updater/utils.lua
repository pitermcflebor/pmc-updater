
--
-- PURE LUA UTILS
--
function string:split(pat)
	pat = pat or '%s+'
	local st, g = 1, self:gmatch("()("..pat..")")
	local function getter(segs, seps, sep, cap1, ...)
	st = sep and seps + #sep
	return self:sub(segs, (seps or 0) - 1), cap1 or sep, ...
	end
	return function() if st then return getter(st, g()) end end
end

function string:ensure()
	return self:gsub('(['..("%^$().[]*+-?"):gsub("(.)", "%%%1")..'])', "%%%1")
end

function string:startsWith(start)
	return self:sub(1, #start) == start
end

function string:endsWith(ending)
	return ending == "" or self:sub(-#ending) == ending
end

function string:trim()
	local n = self:find"%S"
	return n and self:match(".*%S", n) or ""
end

function table.build(iter)
	if type(iter) ~= 'function' then return nil end
	local t_k = {}
    local t_v = {}
	for i,v in iter do table.insert(t_k, i);table.insert(t_v, v) end
	return t_k, t_v
end

function table.fill(input, i)
	local t = {}
	for x=1, i, 1 do table.insert(t,input) end
	return t
end

function table.dump(t, nb)
	if type(t) == 'table' then
		local s = '{\n'
		for key, value in pairs(t) do
			s = s .. table.concat(table.fill('\t', nb or 1)) .. ('[%s] = %s,\n'):format((type(key) == 'string' and ("'%s'"):format(tostring(key)) or key), table.dump(value, (nb or 1)+1))
		end
		return s .. table.concat(table.fill('\t', ((nb or 1)-1 > 0 and nb-1 or 0))) .. '}'
	else
		return (type(t) == 'string' and ("'%s'"):format(tostring(t)) or t)
	end
end

function printWarning(...)
	local raw_params = {...}
	local params = {}
	for k,v in pairs(raw_params) do params[k] = tostring(v) end
	local text = table.concat(params, ' ')
	print('^6[PMC-U]: ^1'..text..'^7')
end
function printLog(...)
	local params = {...}
	for k,v in pairs(params) do params[k] = tostring(v) end
	local text = table.concat(params, ' ')
	print('^6[PMC-U]: ^2'..text..'^7')
end

--
-- UPDATER UTILS
--
function LoadConfigurationFile(cancel)
	local configFile = LoadResourceFile(GetCurrentResourceName(), '.config.lua')
	if configFile == nil then
		printLog("Creating new configuration file at:", ("%s/%s"):format(GetResourcePath(GetCurrentResourceName()), '.config.lua'))
		local wrote = WriteFile(("%s/%s"):format(GetResourcePath(GetCurrentResourceName()), '.config.lua'), "_G.Config = {\n--server_cfg_path = 'C:/some/path', -- uncomment this line to set a .cfg file custom path\n}")
		if cancel ~= true and wrote == true then
			Wait(100)
			LoadConfigurationFile(true)
			AddAcePermission{'command.refresh', 'command.ensure', 'command.start', 'command.stop'}
		end
	else
		local f, err = load(configFile)
		assert(f, err)
		f()
		printLog"Loaded configuration file!"
	end
end

--
-- FIVEM UTILS
--
function GetCurrentResourcesPath(removeResource) return GetResourcePath(GetCurrentResourceName()):gsub('resources.*', removeResource and '' or 'resources') end

function CanUseCommand(cmd)
	return (IsAceAllowed('command.'..tostring(cmd)) == 1)
end

function AddAcePermission(permission)
	local cfgPath = (Config.server_cfg_path ~= nil or Config.server_cfg_path ~= "") and Config.server_cfg_path or (GetCurrentResourcesPath(true))..'server.cfg'
	local cfgFile = ReadFile(cfgPath)
	if type(cfgFile) == 'string' then
		if type(permission) == 'string' then
			local found = cfgFile:find(('add_ace resource.%s %s allow'):format(GetCurrentResourceName():ensure(), permission))
			if found == nil then
				local inserted = false
				for line in cfgFile:split('\n') do
					if line:startsWith('add_ace') then
						cfgFile = cfgFile:gsub(line:ensure(), ("%s\n%s"):format(("add_ace resource.%s %s allow # Auto-generated by PMC-Updater"):format(GetCurrentResourceName(), permission), line))
						inserted = true
						break
					end
				end
				if not inserted then
					cfgFile = cfgFile..("\n%s"):format(("add_ace resource.%s %s allow # Auto-generated by PMC-Updater"):format(GetCurrentResourceName(), permission))
				end
				return WriteFile(cfgPath, cfgFile)
			else
				return true
			end
		elseif type(permission) == 'table' then
			for _, perm in pairs(permission) do
				if not AddAcePermission(perm) then
					return false
				end
			end
		end
	else
		return false
	end
end

function CreateCfgFileIfNotExists()
	local cfgPath = (Config.server_cfg_path ~= nil or Config.server_cfg_path ~= "") and Config.server_cfg_path or GetCurrentResourcesPath(true)..'server.cfg'
	local cfgCustomPath = (Config.server_cfg_path ~= nil or Config.server_cfg_path ~= "") and Config.server_cfg_path or GetCurrentResourcesPath(true)..'git_resources.cfg'
	local cfgFile = ReadFile(cfgPath)
	if type(cfgFile) == 'string' then
		local cfgCustomFile = ReadFile(cfgCustomPath)
		if cfgCustomFile == false then
			if not IsCommandInCfg('exec git_resources.cfg') then
				WriteFile(cfgPath, cfgFile:gsub(("ensure %s"):format(GetCurrentResourceName():ensure()), ("ensure %s\nexec git_resources.cfg"):format(GetCurrentResourceName())))
			end
			WriteFile(cfgCustomPath, "# This file was auto-generated by pmc-updater\n")
		end
		return true
	else
		printWarning('Cannot find the .cfg file! Set a custom path at ".config.lua" file!')
		return false
	end
end

function IsCommandInCfg(cmd, cfgName)
	local cfgPath = (Config.server_cfg_path ~= nil or Config.server_cfg_path ~= "") and Config.server_cfg_path or GetCurrentResourcesPath(true)..(cfgName or 'server.cfg')
	local cfgFile = ReadFile(cfgPath)
	if type(cfgFile) == 'string' then
		local char1, char2 = cfgFile:find(('%s'):format(cmd:ensure()))
		return (char1 ~= nil), cfgFile, cfgPath
	else
		return nil
	end
end

function AddResourceToCfg(resource)
	if IsCommandInCfg('exec git_resources.cfg') then
		local inCfg, cfgFile = IsCommandInCfg(('ensure %s'):format(resource))
		if inCfg then return true end
		CreateCfgFileIfNotExists()
		local inCustomCfg, cfgCustomFile, cfgCustomPath = IsCommandInCfg(('ensure %s'):format(resource), 'git_resources.cfg')
		if inCustomCfg then return true end
		if WriteFile(cfgCustomPath, cfgCustomFile..'\nensure '..resource) then
			return true
		end
	else
		if CreateCfgFileIfNotExists() then
			return AddResourceToCfg(resource)
		else
			return false
		end
	end
end

function RemoveResourceFromCfg(resource)
	local inCfg, cfgFile, cfgPath = IsCommandInCfg('ensure '..resource)
	if inCfg then
		local wrote =  WriteFile(cfgPath, cfgFile:gsub(("\nensure %s"):format(resource:ensure()), ''))
		return wrote
	else
		local inCustomCfg, cfgCustomFile, cfgCustomPath = IsCommandInCfg('ensure '..resource, 'git_resources.cfg')
		local wrote = WriteFile(cfgCustomPath, cfgCustomFile:gsub(("\nensure %s"):format(resource:ensure()), ''))
		return wrote
	end
end

--
-- HTTP I/O
--
_G.requests = {
	debugEnabled = false,
	auth = LoadResourceFile(GetCurrentResourceName(), '.authkey') or "",
}
function requests.get(url, payload, headers)
	assert(type(url) == 'string', 'Invalid Lua type at #1 argument!')
	if payload ~= nil then assert(type(payload) == 'table', 'Invalid Lua type at #2 argument') end
	if headers ~= nil then assert(type(headers) == 'table', 'Invalid Lua type at #3 argument') end
	local p = promise:new()
	PerformHttpRequest(url, function(_rc, _b, _h)
		if requests.debugEnabled then print('[REQUESTS]: Performed GET to', url) end
		if _rc == 200 then
			p:resolve(_b)
		else
			printWarning('Error performing GET request to:', url, '\n\t'.._rc, '\n\t'..(_b or 'empty body'), '\n\t'..table.dump(_h))
			p:resolve(false, _rc, _b, _h)
		end
	end, 'GET', json.encode(payload or {}), headers or {['Content-Type']='text/html;charset=UTF-8', ['User-Agent']='request', ['Authorization']=(requests.auth ~= "" and 'token '..requests.auth or nil)})
	return Citizen.Await(p)
end

--
-- READER/WRITER FUNCTIONS
--
local OSNames = {
	['Windows_NT'] = 'windows',
}
function GetWorkingOS()
	local env_OS = os.getenv('OS')
	return OSNames[env_OS] or env_OS
end
function OpenFolder(destination)
	if GetWorkingOS() == 'windows' then
		os.execute('start '..destination)
		return true
	end
	return false
end

function DeleteFolder(destination)
	if GetWorkingOS() == 'windows' then
		os.execute(('rmdir %s /s /q'):format(destination:gsub('/', '\\')))
		return true
	else
		os.execute(('rm -rf %s'):format(destination))
		return true
	end
end

function GetFile(url)
	local fileText, rc, b, h = requests.get(url)
	if fileText then
		return fileText
	else
		printWarning('Error getting file from', url)
		printWarning('\tCode:', rc)
		printWarning('\tResponse:', b)
		printWarning('\tHeaders:', json.encode(h))
		return false
	end
end

function CreateDirectory(destination)
	local _r, _e, _c = os.execute("mkdir " .. destination)
	if _c ~= 1 and _c ~= 0 then
		printWarning('\tError creating directory:', destination)
		printWarning('\t\t', _r, _e, _c)
		return false
	end
	return true
end

function WriteFile(destination, rawString, failNext)
	local file, err, errorCode = io.open(destination, "wb")
	if err then
		if errorCode == 2 then
			if not failNext then
				local directories = table.build(destination:split('/'))
				table.remove(directories, #directories)
				if CreateDirectory(table.concat(directories, '\\')) then
					return WriteFile(destination, rawString, true)
				end
			else
				printWarning('\tCannot create directory for', destination)
			end
		else
			printWarning('Error writing file', destination, '\n\t', err,'\n\tError code:', errorCode)
		end
	else
		file:write(rawString)
		file:close()
		return true
	end
end

function ReadFile(destination)
	local file, err, errorCode = io.open(destination, "rb")
	if errorCode == 2 then
		return false
	else
		assert(err == nil, ("%s [exit code:%s]"):format(err, errorCode))
	end
	local fileText = file:read("*a")
	file:close()
	return fileText
end
